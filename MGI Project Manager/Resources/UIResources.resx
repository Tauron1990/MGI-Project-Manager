<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BtnCreateJob" xml:space="preserve">
    <value>Create Job</value>
  </data>
  <data name="WindowTitelCreateJob" xml:space="preserve">
    <value>Create Job</value>
  </data>
  <data name="CommonLabelOk" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="StatusCreation" xml:space="preserve">
    <value>Creation</value>
  </data>
  <data name="StatusPrepare" xml:space="preserve">
    <value>Prepare</value>
  </data>
  <data name="StatusPending" xml:space="preserve">
    <value>Pending</value>
  </data>
  <data name="StatusInProgress" xml:space="preserve">
    <value>In Progress</value>
  </data>
  <data name="StatusDrying" xml:space="preserve">
    <value>Drying</value>
  </data>
  <data name="StatusCompled" xml:space="preserve">
    <value>Compled</value>
  </data>
  <data name="LabelJobDate" xml:space="preserve">
    <value>Target Date:</value>
  </data>
  <data name="LabelSelectTargetDate" xml:space="preserve">
    <value>Select Target Date</value>
  </data>
  <data name="LabelIsImportetSelector" xml:space="preserve">
    <value>Is Importent</value>
  </data>
  <data name="LabelCommonError" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="LabelCommonNext" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="AssertJobIsAlreadyInsertet" xml:space="preserve">
    <value>Job Is Already Insertet.</value>
  </data>
  <data name="AssertJobNameInvalid" xml:space="preserve">
    <value>Job Name Is Invalid</value>
  </data>
  <data name="BtnMarkAsImportent" xml:space="preserve">
    <value>Mark As Importent</value>
  </data>
  <data name="TaskFetchJobs" xml:space="preserve">
    <value>Fetching Jobs</value>
  </data>
  <data name="JobCreationNextLabel" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="LabelTimeData" xml:space="preserve">
    <value>Data</value>
  </data>
  <data name="LabelTimeMikron" xml:space="preserve">
    <value>Mikron:</value>
  </data>
  <data name="WaterLabelTimeMikron" xml:space="preserve">
    <value>Mikron</value>
  </data>
  <data name="LabelTimeSpeed" xml:space="preserve">
    <value>Speed:</value>
  </data>
  <data name="WaterLabelTimeSpeed" xml:space="preserve">
    <value>Speed</value>
  </data>
  <data name="TimeFormatToolTip" xml:space="preserve">
    <value>The last Values only in 5 cm steps</value>
  </data>
  <data name="WaterLabelPaperFormat" xml:space="preserve">
    <value>Paper Format</value>
  </data>
  <data name="LabelTimePaperFormat" xml:space="preserve">
    <value>Paper Format:</value>
  </data>
  <data name="LabelTimeRuns" xml:space="preserve">
    <value>Runs:</value>
  </data>
  <data name="WaterLabelRuns" xml:space="preserve">
    <value>Runs</value>
  </data>
  <data name="LabelTimeNumber" xml:space="preserve">
    <value>Amount:</value>
  </data>
  <data name="WaterLabelTimeNumber" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="LabelTimeResult" xml:space="preserve">
    <value>Result</value>
  </data>
  <data name="LabelTimeCalcRuntime" xml:space="preserve">
    <value>Runtime:</value>
  </data>
  <data name="LabelTimeSetupTime" xml:space="preserve">
    <value>Setup Time:</value>
  </data>
  <data name="LabelTimeCompled" xml:space="preserve">
    <value>Compled Time:</value>
  </data>
  <data name="LabelTimeStatus" xml:space="preserve">
    <value>Status:</value>
  </data>
  <data name="BtnTimeCalculate" xml:space="preserve">
    <value>Calculate</value>
  </data>
  <data name="TimeCalcAmountNull" xml:space="preserve">
    <value>Amount was not set.</value>
  </data>
  <data name="TimeCalcIterationNull" xml:space="preserve">
    <value>Passes was not set.</value>
  </data>
  <data name="TimeCalcAmountToLow" xml:space="preserve">
    <value>Amount must be greater than 1.</value>
  </data>
  <data name="TimeCalcIterationToLow" xml:space="preserve">
    <value>Pass must have at least 1.</value>
  </data>
  <data name="TimeCalcPaperFormatWrong" xml:space="preserve">
    <value>Paper Format Specified Incorrect.</value>
  </data>
  <data name="TimeCalcFormatToSmall" xml:space="preserve">
    <value>Format at least A4.</value>
  </data>
  <data name="TimeCalcFormatToLarge" xml:space="preserve">
    <value>Format maximum 52 x 100.</value>
  </data>
  <data name="TimeCalcSpeedNull" xml:space="preserve">
    <value>Speed ​​was not set.</value>
  </data>
  <data name="TimeCalcSpeedLow" xml:space="preserve">
    <value>Speed ​​must be at least 0.06.</value>
  </data>
  <data name="TimeCalcSpeeHight" xml:space="preserve">
    <value>Speed ​​may not exceed 0.7.</value>
  </data>
  <data name="TimeCalcTimeLow" xml:space="preserve">
    <value>The running time must be over 1 second.</value>
  </data>
  <data name="LabelTimeCalcPerThousand" xml:space="preserve">
    <value>per Thousand</value>
  </data>
  <data name="LabelTimeCalcNormalizedTime" xml:space="preserve">
    <value>Normalized time</value>
  </data>
  <data name="LabelTimeSaveJobTime" xml:space="preserve">
    <value>Saving Job Data</value>
  </data>
  <data name="LabelTimeSaveJobTimeSuccess" xml:space="preserve">
    <value>Saving Compled</value>
  </data>
  <data name="TimeCalcRuntimeCalculation" xml:space="preserve">
    <value>Runtime Calculation</value>
  </data>
  <data name="TimeCalculationNoDataLabel" xml:space="preserve">
    <value>No data available.</value>
  </data>
  <data name="LabelTimeCalcSetupTime" xml:space="preserve">
    <value>Setup</value>
  </data>
  <data name="LabelTimeCalcIterationTime" xml:space="preserve">
    <value>Iteration Time</value>
  </data>
  <data name="TitleTimeCalcCalculation" xml:space="preserve">
    <value>Time is calculating</value>
  </data>
  <data name="PrecisionModePerfect" xml:space="preserve">
    <value>High reliability</value>
  </data>
  <data name="PrecisionModeNearCorner" xml:space="preserve">
    <value>Medium reliability</value>
  </data>
  <data name="PrecisionModeAmountMismatchPerfect" xml:space="preserve">
    <value>Extrapolation with medium reliability</value>
  </data>
  <data name="PrecisionModeAmountMismatchNearCorner" xml:space="preserve">
    <value>Extrapolation with low reliability</value>
  </data>
  <data name="PrecisionModeNoData" xml:space="preserve">
    <value>No Data</value>
  </data>
</root>