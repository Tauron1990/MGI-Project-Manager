"use strict";
/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.1.0.0 (NJsonSchema v9.13.28.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
Object.defineProperty(exports, "__esModule", { value: true });
const jQuery = require("jquery");
var ApiClient;
(function (ApiClient) {
    class ValuesClient {
        constructor(baseUrl) {
            this.beforeSend = undefined;
            this.jsonParseReviver = undefined;
            this.baseUrl = baseUrl ? baseUrl : "http://localhost:40000";
        }
        getAll() {
            return new Promise((resolve, reject) => {
                this.getAllWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
            });
        }
        getAllWithCallbacks(onSuccess, onFail) {
            let url_ = this.baseUrl + "/api/Values";
            url_ = url_.replace(/[?&]$/, "");
            jQuery.ajax({
                url: url_,
                beforeSend: this.beforeSend,
                type: "get",
                dataType: "text",
                headers: {
                    "Accept": "application/json"
                }
            }).done((_data, _textStatus, xhr) => {
                this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
            }).fail((xhr) => {
                this.processGetAllWithCallbacks(url_, xhr, onSuccess, onFail);
            });
        }
        processGetAllWithCallbacks(_url, xhr, onSuccess, onFail) {
            try {
                let result = this.processGetAll(xhr);
                if (onSuccess !== undefined)
                    onSuccess(result);
            }
            catch (e) {
                if (onFail !== undefined)
                    onFail(e, "http_service_exception");
            }
        }
        processGetAll(xhr) {
            const status = xhr.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = xhr.responseText;
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (let item of resultData200)
                        result200.push(item);
                }
                return result200;
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = xhr.responseText;
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }
            return null;
        }
        post(value) {
            return new Promise((resolve, reject) => {
                this.postWithCallbacks(value, (result) => resolve(result), (exception, _reason) => reject(exception));
            });
        }
        postWithCallbacks(value, onSuccess, onFail) {
            let url_ = this.baseUrl + "/api/Values";
            url_ = url_.replace(/[?&]$/, "");
            const content_ = JSON.stringify(value);
            jQuery.ajax({
                url: url_,
                beforeSend: this.beforeSend,
                type: "post",
                data: content_,
                dataType: "text",
                headers: {
                    "Content-Type": "application/json",
                }
            }).done((_data, _textStatus, xhr) => {
                this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
            }).fail((xhr) => {
                this.processPostWithCallbacks(url_, xhr, onSuccess, onFail);
            });
        }
        processPostWithCallbacks(_url, xhr, onSuccess, onFail) {
            try {
                let result = this.processPost(xhr);
                if (onSuccess !== undefined)
                    onSuccess(result);
            }
            catch (e) {
                if (onFail !== undefined)
                    onFail(e, "http_service_exception");
            }
        }
        processPost(xhr) {
            const status = xhr.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = xhr.responseText;
                return;
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = xhr.responseText;
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }
            return;
        }
        get(id) {
            return new Promise((resolve, reject) => {
                this.getWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
            });
        }
        getWithCallbacks(id, onSuccess, onFail) {
            let url_ = this.baseUrl + "/api/Values/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            jQuery.ajax({
                url: url_,
                beforeSend: this.beforeSend,
                type: "get",
                dataType: "text",
                headers: {
                    "Accept": "application/json"
                }
            }).done((_data, _textStatus, xhr) => {
                this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
            }).fail((xhr) => {
                this.processGetWithCallbacks(url_, xhr, onSuccess, onFail);
            });
        }
        processGetWithCallbacks(_url, xhr, onSuccess, onFail) {
            try {
                let result = this.processGet(xhr);
                if (onSuccess !== undefined)
                    onSuccess(result);
            }
            catch (e) {
                if (onFail !== undefined)
                    onFail(e, "http_service_exception");
            }
        }
        processGet(xhr) {
            const status = xhr.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = xhr.responseText;
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = xhr.responseText;
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }
            return null;
        }
        put(id, value) {
            return new Promise((resolve, reject) => {
                this.putWithCallbacks(id, value, (result) => resolve(result), (exception, _reason) => reject(exception));
            });
        }
        putWithCallbacks(id, value, onSuccess, onFail) {
            let url_ = this.baseUrl + "/api/Values/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            const content_ = JSON.stringify(value);
            jQuery.ajax({
                url: url_,
                beforeSend: this.beforeSend,
                type: "put",
                data: content_,
                dataType: "text",
                headers: {
                    "Content-Type": "application/json",
                }
            }).done((_data, _textStatus, xhr) => {
                this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
            }).fail((xhr) => {
                this.processPutWithCallbacks(url_, xhr, onSuccess, onFail);
            });
        }
        processPutWithCallbacks(_url, xhr, onSuccess, onFail) {
            try {
                let result = this.processPut(xhr);
                if (onSuccess !== undefined)
                    onSuccess(result);
            }
            catch (e) {
                if (onFail !== undefined)
                    onFail(e, "http_service_exception");
            }
        }
        processPut(xhr) {
            const status = xhr.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = xhr.responseText;
                return;
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = xhr.responseText;
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }
            return;
        }
        delete(id) {
            return new Promise((resolve, reject) => {
                this.deleteWithCallbacks(id, (result) => resolve(result), (exception, _reason) => reject(exception));
            });
        }
        deleteWithCallbacks(id, onSuccess, onFail) {
            let url_ = this.baseUrl + "/api/Values/{id}";
            if (id === undefined || id === null)
                throw new Error("The parameter 'id' must be defined.");
            url_ = url_.replace("{id}", encodeURIComponent("" + id));
            url_ = url_.replace(/[?&]$/, "");
            jQuery.ajax({
                url: url_,
                beforeSend: this.beforeSend,
                type: "delete",
                dataType: "text",
                headers: {}
            }).done((_data, _textStatus, xhr) => {
                this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
            }).fail((xhr) => {
                this.processDeleteWithCallbacks(url_, xhr, onSuccess, onFail);
            });
        }
        processDeleteWithCallbacks(_url, xhr, onSuccess, onFail) {
            try {
                let result = this.processDelete(xhr);
                if (onSuccess !== undefined)
                    onSuccess(result);
            }
            catch (e) {
                if (onFail !== undefined)
                    onFail(e, "http_service_exception");
            }
        }
        processDelete(xhr) {
            const status = xhr.status;
            let _headers = {};
            if (status === 200) {
                const _responseText = xhr.responseText;
                return;
            }
            else if (status !== 200 && status !== 204) {
                const _responseText = xhr.responseText;
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }
            return;
        }
    }
    ApiClient.ValuesClient = ValuesClient;
    class SwaggerException extends Error {
        constructor(message, status, response, headers, result) {
            super();
            this.isSwaggerException = true;
            this.message = message;
            this.status = status;
            this.response = response;
            this.headers = headers;
            this.result = result;
        }
        static isSwaggerException(obj) {
            return obj.isSwaggerException === true;
        }
    }
    ApiClient.SwaggerException = SwaggerException;
    function throwException(message, status, response, headers, result) {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, headers, null);
    }
})(ApiClient = exports.ApiClient || (exports.ApiClient = {}));
//# sourceMappingURL=Client.g.js.map